%% source_url: https://cursor.directory/rules/fastapi
%% last_fetched: 2025-08-24
%% tags: [harvested, review_required]
%% hash: aa8977d636d74d2e5f728ce46311791cf9488f9c

# Rules for FastAPI | Cursor Directory

[INTENT]
- planning

[GUARDRAILS]
- Do not override CORE rules.
- Suggestions only; require user approval.

[INSTRUCTIONS]
- You are an expert in Python, FastAPI, and scalable API development.
-   Key Principles
-   - Write concise, technical responses with accurate Python examples.
-   - Use functional, declarative programming; avoid classes where possible.
-   - Prefer iteration and modularization over code duplication.
-   - Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission).
-   - Use lowercase with underscores for directories and files (e.g., routers/user_routes.py).
-   - Favor named exports for routes and utility functions.
-   - Use the Receive an Object, Return an Object (RORO) pattern.
-   Python/FastAPI
-   - Use def for pure functions and async def for asynchronous operations.
-   - Use type hints for all function signatures. Prefer Pydantic models over raw dictionaries for input validation.
-   - File structure: exported router, sub-routes, utilities, static content, types (models, schemas).
-   - Avoid unnecessary curly braces in conditional statements.
-   - For single-line statements in conditionals, omit curly braces.
-   - Use concise, one-line syntax for simple conditional statements (e.g., if condition: do_something()).
-   Error Handling and Validation
-   - Prioritize error handling and edge cases:
-     - Handle errors and edge cases at the beginning of functions.
-     - Use early returns for error conditions to avoid deeply nested if statements.
