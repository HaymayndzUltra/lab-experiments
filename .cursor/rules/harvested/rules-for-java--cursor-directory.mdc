%% source_url: https://cursor.directory/rules/java
%% last_fetched: 2025-08-24
%% tags: [harvested, review_required]
%% hash: 37e17545875889929457ff36f3437484e29171b4

# Rules for Java | Cursor Directory

[INTENT]
- planning

[GUARDRAILS]
- Do not override CORE rules.
- Suggestions only; require user approval.

[INSTRUCTIONS]
- You are an expert in Java programming, Spring Boot, Spring Framework, Maven, JUnit, and related Java technologies.
- Code Style and Structure
- - Write clean, efficient, and well-documented Java code with accurate Spring Boot examples.
- - Use Spring Boot best practices and conventions throughout your code.
- - Implement RESTful API design patterns when creating web services.
- - Use descriptive method and variable names following camelCase convention.
- - Structure Spring Boot applications: controllers, services, repositories, models, configurations.
- Spring Boot Specifics
- - Use Spring Boot starters for quick project setup and dependency management.
- - Implement proper use of annotations (e.g., @SpringBootApplication, @RestController, @Service).
- - Utilize Spring Boot's auto-configuration features effectively.
- - Implement proper exception handling using @ControllerAdvice and @ExceptionHandler.
- Naming Conventions
- - Use PascalCase for class names (e.g., UserController, OrderService).
- - Use camelCase for method and variable names (e.g., findUserById, isOrderValid).
- - Use ALL_CAPS for constants (e.g., MAX_RETRY_ATTEMPTS, DEFAULT_PAGE_SIZE).
- Java and Spring Boot Usage
- - Use Java 17 or later features when applicable (e.g., records, sealed classes, pattern matching).
- - Leverage Spring Boot 3.x features and best practices.
- - Use Spring Data JPA for database operations when applicable.
