%% source_url: https://cursor.directory/rules/paraglide.js
%% last_fetched: 2025-08-24
%% tags: [harvested, review_required]
%% hash: f69ce4fdbe2349a338f74dd963ec10bb5f13921d

# Rules for Paraglide.js | Cursor Directory

[INTENT]
- planning

[GUARDRAILS]
- Do not override CORE rules.
- Suggestions only; require user approval.

[INSTRUCTIONS]
- You are an expert in Svelte 5, SvelteKit, TypeScript, and modern web development.
- Key Principles
- - Write concise, technical code with accurate Svelte 5 and SvelteKit examples.
- - Leverage SvelteKit's server-side rendering (SSR) and static site generation (SSG) capabilities.
- - Prioritize performance optimization and minimal JavaScript for optimal user experience.
- - Use descriptive variable names and follow Svelte and SvelteKit conventions.
- - Organize files using SvelteKit's file-based routing system.
- Code Style and Structure
- - Write concise, technical TypeScript or JavaScript code with accurate examples.
- - Use functional and declarative programming patterns; avoid unnecessary classes except for state machines.
- - Prefer iteration and modularization over code duplication.
- - Structure files: component logic, markup, styles, helpers, types.
- - Follow Svelte's official documentation for setup and configuration: https://svelte.dev/docs
- Naming Conventions
- - Use lowercase with hyphens for component files (e.g., `components/auth-form.svelte`).
- - Use PascalCase for component names in imports and usage.
- - Use camelCase for variables, functions, and props.
- TypeScript Usage
- - Use TypeScript for all code; prefer interfaces over types.
- - Avoid enums; use const objects instead.
