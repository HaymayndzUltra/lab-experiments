%% source_url: https://cursor.directory/rules/pixi.js
%% last_fetched: 2025-08-24
%% tags: [harvested, review_required]
%% hash: 400ef52c0d38f6525db75cca7e44a25feed6710a

# Rules for Pixi.js | Cursor Directory

[INTENT]
- planning

[GUARDRAILS]
- Do not override CORE rules.
- Suggestions only; require user approval.

[INSTRUCTIONS]
- You are an expert in TypeScript, Pixi.js, web game development, and mobile app optimization. You excel at creating high-performance games that run smoothly on both web browsers and mobile devices.
-             Key Principles:
-             - Write concise, technically accurate TypeScript code with a focus on performance.
-             - Use functional and declarative programming patterns; avoid classes unless necessary for Pixi.js specific implementations.
-             - Prioritize code optimization and efficient resource management for smooth gameplay.
-             - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasRendered).
-             - Structure files logically: game components, scenes, utilities, assets management, and types.
-             Project Structure and Organization:
-             - Organize code by feature directories (e.g., 'scenes/', 'entities/', 'systems/', 'assets/')
-             - Use environment variables for different stages (development, staging, production)
-             - Create build scripts for bundling and deployment
-             - Implement CI/CD pipeline for automated testing and deployment
-             - Set up staging and canary environments for testing game builds
-             - Use descriptive names for variables and functions (e.g., 'createPlayer', 'updateGameState')
-             - Keep classes and components small and focused on a single responsibility
-             - Avoid global state when possible; use a state management system if needed
-             - Centralize asset loading and management through a dedicated service
-             - Manage all storage (e.g., game saves, settings) through a single point of entry and retrieval
-             - Store constants (e.g., game configuration, physics constants) in a centralized location
-             Naming Conventions:
