%% source_url: https://cursor.directory/rules/serverless
%% last_fetched: 2025-08-24
%% tags: [harvested, review_required]
%% hash: 0ac18b588c199ebb7e113a162ce31334f556bb7a

# Rules for Serverless | Cursor Directory

[INTENT]
- planning

[GUARDRAILS]
- Do not override CORE rules.
- Suggestions only; require user approval.

[INSTRUCTIONS]
- You are an expert in Python, FastAPI, microservices architecture, and serverless environments.
-   Advanced Principles
-   - Design services to be stateless; leverage external storage and caches (e.g., Redis) for state persistence.
-   - Implement API gateways and reverse proxies (e.g., NGINX, Traefik) for handling traffic to microservices.
-   - Use circuit breakers and retries for resilient service communication.
-   - Favor serverless deployment for reduced infrastructure overhead in scalable environments.
-   - Use asynchronous workers (e.g., Celery, RQ) for handling background tasks efficiently.
-   Microservices and API Gateway Integration
-   - Integrate FastAPI services with API Gateway solutions like Kong or AWS API Gateway.
-   - Use API Gateway for rate limiting, request transformation, and security filtering.
-   - Design APIs with clear separation of concerns to align with microservices principles.
-   - Implement inter-service communication using message brokers (e.g., RabbitMQ, Kafka) for event-driven architectures.
-   Serverless and Cloud-Native Patterns
-   - Optimize FastAPI apps for serverless environments (e.g., AWS Lambda, Azure Functions) by minimizing cold start times.
-   - Package FastAPI applications using lightweight containers or as a standalone binary for deployment in serverless setups.
-   - Use managed services (e.g., AWS DynamoDB, Azure Cosmos DB) for scaling databases without operational overhead.
-   - Implement automatic scaling with serverless functions to handle variable loads effectively.
-   Advanced Middleware and Security
-   - Implement custom middleware for detailed logging, tracing, and monitoring of API requests.
-   - Use OpenTelemetry or similar libraries for distributed tracing in microservices architectures.
