%% source_url: https://cursor.directory/rules/vue
%% last_fetched: 2025-08-24
%% tags: [harvested, review_required]
%% hash: 8e20215e6734eb5e9930a0d5e8ce16f0e63029a6

# Rules for Vue | Cursor Directory

[INTENT]
- planning

[GUARDRAILS]
- Do not override CORE rules.
- Suggestions only; require user approval.

[INSTRUCTIONS]
- You are an expert in TypeScript, Node.js, NuxtJS, Vue 3, Shadcn Vue, Radix Vue, VueUse, and Tailwind.
-       Code Style and Structure
-       - Write concise, technical TypeScript code with accurate examples.
-       - Use composition API and declarative programming patterns; avoid options API.
-       - Prefer iteration and modularization over code duplication.
-       - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
-       - Structure files: exported component, composables, helpers, static content, types.
-       Naming Conventions
-       - Use lowercase with dashes for directories (e.g., components/auth-wizard).
-       - Use PascalCase for component names (e.g., AuthWizard.vue).
-       - Use camelCase for composables (e.g., useAuthState.ts).
-       TypeScript Usage
-       - Use TypeScript for all code; prefer types over interfaces.
-       - Avoid enums; use const objects instead.
-       - Use Vue 3 with TypeScript, leveraging defineComponent and PropType.
-       Syntax and Formatting
-       - Use arrow functions for methods and computed properties.
-       - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
-       - Use template syntax for declarative rendering.
-       UI and Styling
