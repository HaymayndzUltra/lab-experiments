---
description: Pre-Execution Analysis Orchestrator — continuous analysis workflow
alwaysApply: false
---

## Pre-Execution Analysis Workflow (Continuous Flow)

Objective: Iterate each phase of `memory-bank/queue-system/tasks_active.json` and perform a deep, single-phase analysis using `analyzer.py`. Continue processing regardless of findings.

### State
- Current phase index K is maintained externally by the operator or by re-running this workflow; the workflow always starts at the first unfinished analysis phase in `analysis_active.json` linked to the execution task.

### Inputs
- Execution task: `memory-bank/queue-system/tasks_active.json` (array, exactly one task)
- Analysis mirror: `memory-bank/queue-system/analysis_active.json` (linked via `source_task_id`)
- Repo root: repository top-level (auto-detected by scripts)

### Loop (K = 0..N)
1. Identify execution task `T` and its `todos`.
2. For phase K (0-based), call the analysis engine (proactive mode on; auto-detect repo root and tasks file):
   ```bash
   python3 analyzer.py --phase-index K --proactive > /tmp/analysis_K.json
   ```
3. Parse JSON and document findings:
   - If > 0: Document findings and continue to next phase.
   - If == 0: Mark analysis phase K done in `analysis_active.json` and proceed to K+1.

### Analysis Guidelines
- Findings are documented for awareness and improvement.
- Analysis can continue even with findings present.
- Plans can proceed to execution regardless of findings.

### Commands (reference)
```bash
# Ensure an analysis task exists (linked to execution task)
python3 todo_manager.py new "Pre-execution analysis for <EXEC_TASK_ID>" --mode analysis
python3 todo_manager.py add <ANALYSIS_TASK_ID> "PHASE 0: SETUP & PROTOCOL (READ FIRST) — ANALYSIS\n\nPurpose: ...\n\nDecision Gate: ...\n\nIMPORTANT NOTE: ..." --mode analysis

# For each K, run analyzer (read-only, proactive) and write findings preview
python3 analyzer.py --phase-index K --proactive > /tmp/analysis_K.json

# HALT rule: if jq '.findings | length' > 0 → stop and display
cat /tmp/analysis_K.json | jq -r '.findings[] | "- [\(.category)] (\(.severity)) \(.description)"'

# If zero findings, mark analysis K done
python3 todo_manager.py done <ANALYSIS_TASK_ID> K --mode analysis
```

### Completion
- When all phases K are processed in `analysis_active.json`, emit:
  - "Analysis Complete - Ready for Execution."

### IMPORTANT NOTE
- This orchestrator is analysis-only. It must not execute any side-effectful commands from execution phases.
- Analysis findings are documented for awareness but don't block execution.
- Findings can be addressed at any time as part of continuous improvement.

